// File: axi_master_tb.v
module axi_master_tb;
    // Parameters
    parameter AXI_DATA_WIDTH = 32;
    parameter AXI_ADDR_WIDTH = 32;
    parameter CLK_PERIOD = 10;
    
    // Signals
    reg                             clk;
    reg                             rst_n;
    reg                             start_write;
    reg                             start_read;
    reg  [AXI_ADDR_WIDTH-1:0]      addr_in;
    reg  [AXI_DATA_WIDTH-1:0]      data_in;
    wire [AXI_DATA_WIDTH-1:0]      data_out;
    wire                           busy;
    wire                           done;
    
    // AXI signals
    wire [AXI_ADDR_WIDTH-1:0]      m_axi_awaddr;
    wire [2:0]                     m_axi_awsize;
    wire [1:0]                     m_axi_awburst;
    wire                           m_axi_awvalid;
    reg                            m_axi_awready;
    wire [AXI_DATA_WIDTH-1:0]      m_axi_wdata;
    wire [AXI_DATA_WIDTH/8-1:0]    m_axi_wstrb;
    wire                           m_axi_wlast;
    wire                           m_axi_wvalid;
    reg                            m_axi_wready;
    reg  [1:0]                     m_axi_bresp;
    reg                            m_axi_bvalid;
    wire                           m_axi_bready;
    wire [AXI_ADDR_WIDTH-1:0]      m_axi_araddr;
    wire [2:0]                     m_axi_arsize;
    wire [1:0]                     m_axi_arburst;
    wire                           m_axi_arvalid;
    reg                            m_axi_arready;
    reg  [AXI_DATA_WIDTH-1:0]      m_axi_rdata;
    reg  [1:0]                     m_axi_rresp;
    reg                            m_axi_rlast;
    reg                            m_axi_rvalid;
    wire                           m_axi_rready;
    
    // Clock generation
    initial begin
        clk = 0;
        forever #(CLK_PERIOD/2) clk = ~clk;
    end
    
    // DUT instantiation
    axi_master #(
        .AXI_DATA_WIDTH(AXI_DATA_WIDTH),
        .AXI_ADDR_WIDTH(AXI_ADDR_WIDTH)
    ) dut (.*);
    
    // Test stimulus
    initial begin
        // Initialize
        rst_n = 0;
        start_write = 0;
        start_read = 0;
        addr_in = 0;
        data_in = 0;
        m_axi_awready = 1;
        m_axi_wready = 1;
        m_axi_bresp = 0;
        m_axi_bvalid = 0;
        m_axi_arready = 1;
        m_axi_rdata = 0;
        m_axi_rresp = 0;
        m_axi_rlast = 0;
        m_axi_rvalid = 0;
        
        $display("=== Test Started ===");
        
        // Reset
        #(CLK_PERIOD*2);
        rst_n = 1;
        #(CLK_PERIOD*2);
        
        // Test Write Transaction
        $display("\nStarting Write Test...");
        addr_in = 32'h1234_5678;
        data_in = 32'hABCD_EF01;
        start_write = 1;
        @(posedge clk);
        start_write = 0;
        
        // Wait for write response
        @(posedge m_axi_bready);
        #(CLK_PERIOD*2);
        m_axi_bvalid = 1;
        @(posedge clk);
        m_axi_bvalid = 0;
        
        // Wait for completion
        @(posedge done);
        $display("Write Test Complete");
        $display("Write Address: %h", m_axi_awaddr);
        $display("Write Data: %h", m_axi_wdata);
        
        // Test Read Transaction
        #(CLK_PERIOD*5);
        $display("\nStarting Read Test...");
        addr_in = 32'h8765_4321;
        start_read = 1;
        @(posedge clk);
        start_read = 0;
        
        // Provide read data
        @(posedge m_axi_rready);
        #(CLK_PERIOD*2);
        m_axi_rdata = 32'h1234_5678;
        m_axi_rvalid = 1;
        m_axi_rlast = 1;
        @(posedge clk);
        m_axi_rvalid = 0;
        m_axi_rlast = 0;
        
        // Wait for completion
        @(posedge done);
        $display("Read Test Complete");
        $display("Read Address: %h", m_axi_araddr);
        $display("Read Data: %h", data_out);
        
        // End simulation
        #(CLK_PERIOD*5);
        $display("\n=== Test Complete ===");
        $finish;
    end
    
    // Monitor
    always @(posedge clk) begin
        if (busy)
            $display("Time=%0t: Busy, State=%0d", $time, dut.state);
    end

endmodule